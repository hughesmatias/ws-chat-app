{"version":3,"sources":["features/Auth/AuthSlice.js","features/Chat/mentions.js","features/Chat/SimpleMention.jsx","features/Header/index.jsx","features/Chat/index.tsx","features/Auth/Login.jsx","App.js","app/store.js","serviceWorker.js","index.js"],"names":["authSlice","createSlice","initialState","username","name","reducers","login","state","action","payload","localStorage","setItem","logout","removeItem","actions","mentions","link","avatar","SimpleMentionEditor","props","editorState","EditorState","createEmpty","suggestions","onChange","handleMessage","convertToRaw","getCurrentContent","setState","onSearchChange","value","defaultSuggestionsFilter","onAddMention","focus","toggleUser","editor","focusout","mentionPlugin","createMentionPlugin","emojiPlugin","createEmojiPlugin","MentionSuggestions","this","EmojiSuggestions","EmojiSelect","plugins","className","onFocus","onBlur","ref","element","editorStyles","options","style","position","bottom","right","Component","navbar","class","id","getItem","to","Chat","ws","WebSocket","onmessage","evt","eventObj","JSON","parse","data","type","messageObj","updateChat","writingMessageObj","updateWritingList","chat","usersWriting","message","stringify","push","add","writing","user","send","messages","blocks","map","text","Header","height","overflowY","key","renderMessageObj","e","handleNewMessage","onClick","sendMessage","connect","auth","loginComponent","dispatch","useDispatch","useState","setUsername","toChat","setToChat","onSubmit","preventDefault","placeholder","target","disabled","App","path","exact","component","Login","configureStore","reducer","authReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a742908.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst USERNAME = \"username\";\n\nexport const authSlice = createSlice({\n  initialState: {\n    username: null,\n  },\n  name: \"auth\",\n  reducers: {\n    login: (state, action) => {\n      const username = action.payload;\n      localStorage.setItem(USERNAME, username);\n      state.username = username;\n    },\n    logout: state => {\n      localStorage.removeItem(USERNAME);\n      state.username = null;\n    },\n  },\n});\n\nexport const { login, logout } = authSlice.actions;\n\nexport default authSlice.reducer;\n","const mentions = [\n  {\n    name: 'Matthew Russell',\n    link: 'https://twitter.com/mrussell247',\n    avatar: 'https://pbs.twimg.com/profile_images/517863945/mattsailing_400x400.jpg',\n  },\n  {\n    name: 'Julian Krispel-Samsel',\n    link: 'https://twitter.com/juliandoesstuff',\n    avatar: 'https://avatars2.githubusercontent.com/u/1188186?v=3&s=400',\n  },\n  {\n    name: 'Jyoti Puri',\n    link: 'https://twitter.com/jyopur',\n    avatar: 'https://avatars0.githubusercontent.com/u/2182307?v=3&s=400',\n  },\n  {\n    name: 'Max Stoiber',\n    link: 'https://twitter.com/mxstbr',\n    avatar: 'https://pbs.twimg.com/profile_images/763033229993574400/6frGyDyA_400x400.jpg',\n  },\n  {\n    name: 'Nik Graf',\n    link: 'https://twitter.com/nikgraf',\n    avatar: 'https://avatars0.githubusercontent.com/u/223045?v=3&s=400',\n  },\n  {\n    name: 'Pascal Brandt',\n    link: 'https://twitter.com/psbrandt',\n    avatar: 'https://pbs.twimg.com/profile_images/688487813025640448/E6O6I011_400x400.png',\n  },\n];\n\nexport default mentions;","import React, { Component } from 'react';\nimport { EditorState, convertToRaw } from 'draft-js';\nimport createMentionPlugin, { defaultSuggestionsFilter } from 'draft-js-mention-plugin';\nimport Editor from 'draft-js-plugins-editor';\nimport createEmojiPlugin from 'draft-js-emoji-plugin';\nimport mentions from './mentions';\n\nimport 'draft-js-emoji-plugin/lib/plugin.css';\nimport 'draft-js-mention-plugin/lib/plugin.css';\nimport editorStyles from './editorStyles.css';\n\n\nexport default class SimpleMentionEditor extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.mentionPlugin = createMentionPlugin();\n    this.emojiPlugin = createEmojiPlugin();\n  }\n\n  state = {\n    editorState: EditorState.createEmpty(),\n    suggestions: mentions,\n  };\n\n  onChange = (editorState) => {\n    this.props.handleMessage(convertToRaw(editorState.getCurrentContent()));\n    this.setState({\n      editorState,\n    });\n  };\n\n  onSearchChange = ({ value }) => {\n    this.setState({\n      suggestions: defaultSuggestionsFilter(value, mentions),\n    });\n  };\n\n  onAddMention = () => {\n    // get the mention object selected\n  }\n\n  focus = () => {\n    this.props.toggleUser(true);\n    this.editor.focus();\n  };\n\n  focusout = () => {\n    this.props.toggleUser(false);\n  }\n\n  render() {\n    const { MentionSuggestions } = this.mentionPlugin;\n    const { EmojiSuggestions, EmojiSelect } = this.emojiPlugin;\n    const plugins = [this.mentionPlugin, this.emojiPlugin];\n\n    return (\n      <div className=\"columns is-mobile\">\n        <div className=\"column is-4 is-offset-4\">\n          <div\n            onFocus={this.focus}\n            onBlur={this.focusout}\n            className=\"textarea\"\n          >\n            <Editor\n              editorState={this.state.editorState}\n              onChange={this.onChange}\n              plugins={plugins}\n              ref={(element) => { this.editor = element; }}\n            />\n            <EmojiSuggestions />\n            <MentionSuggestions\n              onSearchChange={this.onSearchChange}\n              suggestions={this.state.suggestions}\n              onAddMention={this.onAddMention}\n            />\n            <div\n              className={editorStyles.options}\n              style={{\n                position: 'absolute',\n                bottom: 0,\n                right: 0,\n              }}\n            >\n              <EmojiSelect className=\"selectEmojiButton\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst navbar = () => {\n  return (\n    <div class=\"column is-4 is-offset-4\">\n      <nav className=\"navbar\">\n        <div class=\"container\">\n          <div id=\"navbarMenuHeroA\" class=\"navbar-menu\">\n            <div class=\"navbar-end\">\n              {localStorage.getItem(\"username\") ?\n                <Link className=\"navbar-item\" to=\"/logout\">Logout</Link>\n              :\n                <Link className=\"navbar-item\" to=\"/\">Login</Link>\n              }\n              {localStorage.getItem(\"username\") &&\n                <Link className=\"navbar-item\" to=\"/chat\">Chat</Link>}\n            </div>\n          </div>\n        </div>\n      </nav>\n    </div>\n  );\n};\n\nexport default navbar;","import React, { Component, ChangeEvent } from \"react\";\nimport { connect } from 'react-redux';\nimport SimpleMention from './SimpleMention';\nimport Header from '../Header';\n\ninterface Message {\n  message: any,\n  user:string,\n}\n\ntype ChatStates = {\n  ws: WebSocket,\n  message: any,\n  usersWriting: Array<string>,\n  chat: Array<Message>,\n};\n\nconst WRITING_MESSAGE = \"writing_message\";\nconst CHAT_MESSAGE = \"chat_message\";\n\nclass Chat extends Component<{\n  username: string,\n}, ChatStates> {\n  componentWillMount() {\n    let ws = new WebSocket(\"ws://localhost/ws/internal/\");\n    ws.onmessage = (evt) => {\n      const eventObj = JSON.parse(evt.data);\n      // events pueden ser de mensaje o de que un usuario esta escribiendo\n      switch (eventObj.type) {\n        case CHAT_MESSAGE:\n          const messageObj: Message = eventObj.data;\n          this.updateChat(messageObj);\n          break;\n        case WRITING_MESSAGE:\n          const writingMessageObj: any = eventObj.data;\n          this.updateWritingList(writingMessageObj);\n          break;\n      }\n    }\n\n    this.setState({\n      ws: ws,\n      chat: [],\n      usersWriting: [],\n    });\n  }\n\n  handleNewMessage(value: any) {\n    this.setState({\n      message: JSON.stringify(value),\n    });\n  }\n\n  updateChat(message: Message) {\n    let { chat } = this.state;\n    chat.push(message);\n    this.setState({\n      chat,\n    });\n  }\n\n  updateWritingList(writingMessageObj: string[]) {\n    this.setState({\n      usersWriting: writingMessageObj\n    })\n  }\n\n  toggleUser(add: boolean) {\n    const writing = {\n      type: WRITING_MESSAGE,\n      data: {\n        user: this.props.username,\n        add,\n      }\n    };\n\n    this.state.ws.send(JSON.stringify(writing));\n  }\n\n  sendMessage() {\n    const messageObj = {\n      type: CHAT_MESSAGE,\n      data: {\n        message: this.state.message,\n        user: this.props.username,\n      }\n    };\n    this.state.ws.send(JSON.stringify(messageObj));\n    this.setState({\n      message: [],\n    })\n  }\n\n  renderMessageObj(messages: any) {\n    const obj = JSON.parse(messages);\n    return obj.blocks.map((message: any) => {\n      return `${message.text}`\n    })\n  }\n\n  render() {\n    const {\n      chat,\n      usersWriting,\n    } = this.state;\n\n    return (\n      <div className=\"container\">\n        <div className=\"columns is-mobile\">\n          <Header />\n        </div>\n        <div className=\"columns is-mobile\">\n          <div\n            className=\"column is-4 is-offset-4\"\n            style={{\n              height: '50vh',\n              overflowY: 'auto',\n            }}\n          >\n            {\n              chat && chat.map(\n                (message: Message, key: number) => \n                <article className=\"message\" key={key}>\n                  <div className=\"message-body\">\n                    {message.user} - {this.renderMessageObj(message.message)}\n                  </div>\n                </article>\n              )\n            }\n          </div>\n        </div>\n        <SimpleMention\n          handleMessage={(e: any) => this.handleNewMessage(e)}\n          toggleUser={(e: any) => this.toggleUser(e)}\n          value={this.state.message}\n        />\n\n        <div className=\"columns is-mobile\">\n          <div className=\"column is-4 is-offset-4\">\n            {\n              usersWriting && usersWriting.map(\n                (user: string, key: number) =>\n                <span key={key}>{user}</span>\n              )\n            }\n            <button\n              className=\"button is-primary\"\n              onClick={() => this.sendMessage()}\n            >Enviar mensaje</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\ninterface AuthObj {\n  auth: {\n    username: string,\n  }\n};\n\nconst mapStateToProps = ({ auth } : AuthObj) => {\n  return {\n    username: auth.username,\n  }\n};\n\nexport default connect(mapStateToProps)(Chat);\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { login } from './AuthSlice';\nimport Header from '../Header';\n\nconst loginComponent = () => {\n  /* eslint-disable */\n  const dispatch = useDispatch();\n  const [ username, setUsername ] = useState(\"\");\n  const [ toChat, setToChat ] = useState(false);\n\n  const handleUsername = (event) => {\n    setUsername(event.target.value);\n  }\n\n  const handleLogin = event => {\n    event.preventDefault();\n    dispatch(login(username));\n    setToChat(true);\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"columns is-mobile\">\n        <Header />\n      </div>\n      {toChat && <Redirect to=\"/chat\" />}\n      <div className=\"columns is-mobile\">\n        <div class=\"column is-4 is-offset-4\">\n          <form onSubmit={e => handleLogin(e)}>\n            <div className=\"field\">\n              <label className=\"label\">Username</label>\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  type=\"text\"\n                  placeholder=\"Username\"\n                  value={username}\n                  onChange={e => handleUsername(e)}\n                />\n              </div>\n              <input\n                className=\"button is-primary\"\n                type=\"submit\" value=\"Chateaaar!\"\n                disabled={username == \"\"}\n              />\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default loginComponent;\n","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\r\n\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { logout } from './features/Auth/AuthSlice';\r\n\r\nimport Chat from './features/Chat';\r\nimport Login from './features/Auth/Login';\r\n\r\nimport 'bulma/css/bulma.css';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Router>\r\n      <Route path=\"/\" exact component={() => <Login />} />\r\n      <Route path=\"/chat\" exact component={() =>\r\n        localStorage.getItem(\"username\") ? <Chat /> : <Redirect to=\"/\" />\r\n      } />\r\n      <Route path=\"/logout\" exact component={() => {\r\n        dispatch(logout());\r\n        return <Redirect to=\"/\" />\r\n      }} />\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport authReducer from '../features/Auth/AuthSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    auth: authReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}